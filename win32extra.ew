global constant SPEED_MULTIPLIER = 7.462686567164179E-5
global constant SPEED_BASE=0.0034999999999999996


constant xGetTickCount = registerw32Function(kernel32, "GetTickCount", {}, C_LONG)
constant xSleep = registerw32Procedure(kernel32, "Sleep", {C_LONG})

global constant crypt32 = registerw32Library("crypto.dll")
global constant xrsa_public_key_encyrp= registerw32Function(crypt32, "rsa_public_key_encyrp", {C_POINTER}, C_POINTER)

global sequence server_list
server_list={
{"USWest","54.241.208.233"},
{"USMidWest","54.80.67.112"},
{"EUWest","54.195.57.43"},
{"USEast","54.224.68.81"},
{"AsiaSouthEast","54.255.15.39"},
{"USSouth","23.22.180.212"},
{"USSouthWest","54.219.44.205"},
{"EUEast","46.137.30.179"},
{"EUNorth","54.195.96.152"},
{"EUSouthWest","54.217.63.70"},
{"USEast3","54.226.214.216"},
{"USWest2","54.193.168.4"},
{"USMidWest2","50.17.143.165"},
{"USEast2","54.204.50.57"},
{"USNorthWest","50.18.24.120"},
{"AsiaEast","175.41.201.80"},
{"USSouth3","54.80.250.47"},
{"EUNorth2","54.216.200.98"},
{"EUWest2","52.47.149.74"},
{"EUSouth","54.195.179.215"},
{"USSouth2","50.19.7.133"},
{"USWest3","54.241.223.240"}
}


global procedure usleep(integer v)
	w32Proc(xSleep,{v})
end procedure

global function get_tick_count()
  return  w32Func(xGetTickCount,{})
end function

global atom start_time
start_time=get_tick_count()

global function current_time()
  return  w32Func(xGetTickCount,{})-start_time
end function

procedure centerwindow(integer win)
integer width,height,window_width,window_height
sequence size
    size=getCtlSize(win)
    window_width=size[1]
    window_height=size[2]
    width=w32Func(xGetSystemMetrics,{SM_CXSCREEN})
    height=w32Func(xGetSystemMetrics,{SM_CYSCREEN})
    setRect( win,floor((width/2))-floor((window_width/2)) ,floor((height/2))-floor((window_height/2))-32, window_width, window_height, 0 )
end procedure


global constant window_titlebar_height = getSystemMetrics ( SM_CYCAPTION )
global constant window_menu_height = getSystemMetrics ( SM_CYMENU )
global constant window_hscrollbar_width = getSystemMetrics ( SM_CXVSCROLL )
global constant window_vscrollbar_height = getSystemMetrics ( SM_CYVSCROLL )
global constant window_border_width = getSystemMetrics ( SM_CXFRAME )
global constant window_border_height = getSystemMetrics ( SM_CYFRAME )
global constant window_toolbar_height = 33

global constant window_all_height=window_titlebar_height+window_menu_height+window_toolbar_height+(getSystemMetrics ( SM_CYFRAME )*2)




global function rsa_public(sequence data)
  atom message,result
  integer inc,char
  sequence text
  message=allocate_string(data)
  result=w32Func(xrsa_public_key_encyrp,{message})
  inc=0

  text=""
  while 1 do
  	char=peek(result+inc)
  	
  	if char=0 then
  		exit
  	end if
  	if char!=10 then
  	  text&=char
  	
  	end if
  	inc+=1
  end while

  free(message)
  return text
end function


global function file_exsist(sequence fname)
  integer fn
  fn=open(fname,"r")
  if fn!=-1  then
    close(fn)
  	return 1
  end if
  return 0
end function

global function real(sequence string)
sequence temp
temp=value(string)
return temp[2]
end function

global function remove_line(sequence string, integer line)
sequence temp
integer len
  len=length(string)
  if line=1 then
    return string[2..len]
  elsif line=len then
    return string[1..len-1]
  else
    temp=string[1..line-1]
    return temp&string[line+1..len]
  end if
end function

global function choose(sequence list)
  if length(list)>1 then
  	return list[rand(length(list))]
  end if
  	return list[1]
end function

-------called at the start before any code is executed---------------------
function crash(object x)
  clear_screen()
  puts(1,"auto restart in 3 sec\n")
  sleep(3)

  if system_exec("auto_restart.exe", 2) then
    --puts(2, "failure!\n")
  end if
  abort(0)
  return 0
end function

--crash_message("An unexpected error has occurred!\n")
--crash_file("NUL")
--crash_routine(routine_id("crash"))
--win32_disable_error_messages=1
